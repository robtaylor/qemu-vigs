include ./../../config-host.mak
include ./../../i386-softmmu/config-target.mak
#include ./../../arm-softmmu/config-target.mak

# Trick for invalid QEMU Makefile targets coming from the first include file
subdir-libhw32: all
subdir-libhw64: all


GLIB_CFLAGS = @GLIB_CFLAGS@
GLIB_LIBS   = @GLIB_LIBS@

GTK_CFLAGS  = @GTK_CFLAGS@
GTK_LIBS    = @GTK_LIBS@

GMODULE_CFLAGS  = @GMODULE_CFLAGS@
GMODULE_LIBS    = @GMODULE_LIBS@

XML_CFLAGS = @XML_CFLAGS@
XML_LIBS = @XML_LIBS@

GTHREAD_CFLAGS = @GTHREAD_CFLAGS@
GTHREAD_LIBS = @GTHREAD_LIBS@

ALSA_CFLAGS = @ALSA_CFLAGS@
ALSA_LIBS = @ALSA_LIBS@

PACKAGE_VERSION = @PACKAGE_VERSION@
DEBIAN_VERSION = @DEBIAN_VERSION@

ifeq ($(V),1)
  Q =
else
  Q = @
endif

ARCH_LIBS = $(LIBS)

CFLAGS = @CFLAGS@

ifeq ($(CONFIG_WIN32),y)
	ARCH_LIBS += -lz \
		     -lole32 \
		     -lwsock32 \
		     -liphlpapi \
 		     -ladvapi32 
	DIRECTORYS = \
	             ../..
else ifeq ($(CONFIG_LINUX),y)
	ARCH_LIBS += -lutil \
		     -lcurses \
		     -lfl \
		     -ljpeg 
	CFLAGS += -fstack-protector
	DIRECTORYS = \
		     ../..
endif

ifeq ($(CONFIG_DSOUND),y)
	ARCH_LIBS += -ldsound -ddraw -ldplayx -ldinput -ldxguid
endif

prefix = @prefix@
PHONE_DIR = ../binary

DEBUG = y
STRIP = strip
TARGET_X86 = emulator-x86
TARGET_ARM = emulator-arm
VTM = vtm
EMUL_LIB = libemulator.a

DEF += @DEF@

INCDIRS += ../../
INCDIRS += ../../i386-softmmu
INCDIRS += .
INCDIRS += ../../target-i386

# overrides Qemu's CFLAGS...
CFLAGS += $(DEF:%=-D%)
CFLAGS += $(INCDIRS:%=-I%)
CFLAGS += $(GLIB_CFLAGS) $(GTK_CFLAGS) $(XML_CFLAGS) $(SDL_CFLAGS) $(GMODULE_CFLAGS)
CFLAGS += -Wmissing-prototypes -Wmissing-declarations -Wstrict-prototypes
CFLAGS += -Wp,-MD,$(dir $@).$(notdir $@).d -Wp,-MT,$@ 

LDFLAGS += -Wl,--as-needed -Wl,--export-dynamic

OBJS_COMMON = \
	about_version.o \
	configuration.o \
	command.o \
	compass.o \
	dbi_parser.o \
	dialog.o \
	event_handler.o \
	fileio.o \
	gpsnew.o \
	logmsg.o \
	menu.o \
	menu_callback.o \
	option.o \
	option_callback.o \
	process.o \
	qemu_gtk_widget.o \
	screen_shot.o \
	sensor_server.o \
	emulsignal.o \
	emulator.o \
	tools.o \
	utils.o \
	vt_utils.o \
	vinit_process.o

OBJS_X86 += $(OBJS_COMMON) arch_x86.o

OBJS_ARM += $(OBJS_COMMON) arch_arm.o

OBJS_VTM = \
	fileio.o \
	logmsg.o \
	vt_utils.o \
	utils.o \
	dialog.o \
	process.o \
	vtm.o

SRCS_X86 = $(OBJS_X86:%.o=%.c)
SRCS_ARM = $(OBJS_ARM:%.o=%.c)
SRCS_VTM = $(OBJS_VTM:%.o=%.c)

OBJ = $(OBJS_COMMON) $(OBJS_X86) $(OBJS_ARM) $(OBJS_VTM)

DEPFILES += $(foreach object,$(OBJ),$(dir $(object)).$(notdir $(object)).d)

.SUFFIXES: .c

# libqemu_common.a is specified twice because of a circular reference
LIBS_COMMON = \
	$(GLIB_LIBS) \
	$(XML_LIBS) \
	$(GTK_LIBS) \
	$(GMODULE_LIBS) \
	$(GTHREAD_LIBS) \
	$(SDL_LIBS) \
	$(CONFIG_VNC_TLS_LIBS) \
	$(AIOLIBS) \
	$(ALSA_LIBS) \
	$(ARCH_LIBS) \
	$(LIBS_TOOLS)

X86_QEMU_LIBFLAGS = \
 -Wl,-whole-archive ../../i386-softmmu/libccc.a -Wl,-no-whole-archive -luuid

ifeq ($(CONFIG_WIN32),y)
    X86_QEMU_LIBFLAGS += -lopengl32 -lws2_32 -lgdi32 -lpthread
else ifeq ($(CONFIG_LINUX),y)
    X86_QEMU_LIBFLAGS += -lGL
endif

ARM_QEMU_LIBFLAGS = \
-Wl,-whole-archive ../../arm-softmmu/libccc.a -Wl,-no-whole-archive -luuid

ifeq ($(CONFIG_GLES2),y)
  ifeq ($(CONFIG_GLES2_STATIC),y)
    ARM_QEMU_LIBFLAGS+=-Wl,-Bstatic -lEGL -lGLESv2 -lOSMesa -Wl,-Bdynamic
  else
    ARM_QEMU_LIBFLAGS+=-L /opt/dgles2/lib -lEGL -lGLESv2
  endif
endif

%.o: %.c
	@echo "  CC    $@"
	$(Q)$(CC) $(CFLAGS) -o $@ -c $<

#all: $(TARGET_X86) $(TARGET_ARM)
all: $(TARGET_X86) $(VTM)

-include $(DEPFILES)

about_version.c: dummy
	@echo "  GEN   $@"
	@echo "/* automatically generated by Makefile.in, do not modify */" > $@
	@echo "#include \"about_version.h\"" >> $@
	@echo "const char build_version[] =\"$(DEBIAN_VERSION)\";" >> $@
	@echo "const char build_git[] =\"`git rev-parse --short HEAD`\";" >> $@
#	@echo "const char build_tag[] =\"`cd qemu && git describe --abbrev=0`\";" >> $@
	@echo "const char build_date[] =\"`date +"%F %T %Z"`\";" >> $@
	@echo "const char license_text[] =" >> $@
	@cat ../../COPYING | sed -e 's/"/\\"/g' | sed -e 's/^/\"/' | sed -e 's/$$/\\n"/' >> $@
	@echo ";" >> $@

DIRS = $(DIRECTORYS)

.PHONY: dummy

%/__dir__: dummy
	cd `dirname $@` && $(MAKE)

qemu/config-host.h: ../../__dir__
qemu/config-host.mak: dummy
qemu/i386-softmmu/config-target.mak: dummy
qemu/arm-softmmu/config-target.mak: dummy

$(OBJ): qemu/config-host.h

# rpath is the search path for .so libraries (similar to LD_LIBRARY_PATH)
$(TARGET_X86): $(DIRS:%=%/__dir__) $(OBJS_X86)
	@echo "  LINK $@"
	$(Q)$(CC) -Wl,--rpath,$$ORIGIN/lib $(OBJS_X86) $(LDFLAGS) $(X86_QEMU_LIBFLAGS) $(LIBS_COMMON) -o $@

$(TARGET_ARM): $(DIRS:%=%/__dir__) $(OBJS_ARM)
	@echo "  LINK $@"
	$(Q)$(CC) -Wl,--rpath,$$ORIGIN/lib $(OBJS_ARM) $(LDFLAGS) $(ARM_QEMU_LIBFLAGS) $(LIBS_COMMON) -o $@

$(VTM) : $(OBJS_VTM)
	@echo "  LINK $@"
	$(Q)$(CC) -Wl,--rpath,$$ORIGIN/lib $(OBJS_VTM) $(LDFLAGS) $(LIBS_COMMON) -o $@

install: $(TARGET)
	#mkdir -p $(PHONE_DIR)
	install emulator-x86 $(PHONE_DIR)/emulator-x86
	#install emulator-arm $(PHONE_DIR)/emulator-arm
ifneq ($(CONFIG_WIN32),y)
	install emulator.sh	$(PHONE_DIR)/emulator
else
	install emulator.bat $(PHONE_DIR)
endif
	install vtm $(PHONE_DIR)/vtm
	install emulator.png $(PHONE_DIR)
	install savevm.glade $(PHONE_DIR)
	install vtm.glade $(PHONE_DIR)
#	install gps.glade $(PHONE_DIR)

%/__dir_clean__: dummy
	cd `dirname $@` && $(MAKE) clean

clean: $(DIRS:%=%/__dir_clean__)
	rm -f $(OBJS_X86)
	rm -f $(OBJS_ARM)
	rm -f $(OBJS_VTM)
	rm -f $(TARGET_X86)
	rm -f $(TARGET_ARM)
	rm -f $(VTM)
	rm -f $(DEPFILES)
	rm -f about_version.c
