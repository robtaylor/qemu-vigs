/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_eventcast_2eproto__INCLUDED
#define PROTOBUF_C_eventcast_2eproto__INCLUDED

#include "../../../distrib/protobuf/protobuf-c.h"

PROTOBUF_C_BEGIN_DECLS


typedef struct _Eventcast__HandShakeReq Eventcast__HandShakeReq;
typedef struct _Eventcast__HandShakeAns Eventcast__HandShakeAns;
typedef struct _Eventcast__EmulatorState Eventcast__EmulatorState;
typedef struct _Eventcast__AppState Eventcast__AppState;
typedef struct _Eventcast__StartReq Eventcast__StartReq;
typedef struct _Eventcast__StartAns Eventcast__StartAns;
typedef struct _Eventcast__SetEventStatus Eventcast__SetEventStatus;
typedef struct _Eventcast__EventMsg Eventcast__EventMsg;
typedef struct _Eventcast__EventTerminate Eventcast__EventTerminate;
typedef struct _Eventcast__SetSensorStatus Eventcast__SetSensorStatus;
typedef struct _Eventcast__SensorData Eventcast__SensorData;
typedef struct _Eventcast__SensorMsg Eventcast__SensorMsg;
typedef struct _Eventcast__Resolution Eventcast__Resolution;
typedef struct _Eventcast__DisplayMsg Eventcast__DisplayMsg;
typedef struct _Eventcast__TouchMaxCount Eventcast__TouchMaxCount;
typedef struct _Eventcast__TouchData Eventcast__TouchData;
typedef struct _Eventcast__HWKeyMsg Eventcast__HWKeyMsg;
typedef struct _Eventcast__TouchMsg Eventcast__TouchMsg;
typedef struct _Eventcast__EventCastMsg Eventcast__EventCastMsg;


/* --- enums --- */

typedef enum _Eventcast__EventMsg__TYPE {
  EVENTCAST__EVENT_MSG__TYPE__START_REQ = 2,
  EVENTCAST__EVENT_MSG__TYPE__START_ANS = 3,
  EVENTCAST__EVENT_MSG__TYPE__TERMINATE = 4,
  EVENTCAST__EVENT_MSG__TYPE__EVENT_STATUS = 5
} Eventcast__EventMsg__TYPE;
typedef enum _Eventcast__SensorMsg__Type {
  EVENTCAST__SENSOR_MSG__TYPE__START_REQ = 2,
  EVENTCAST__SENSOR_MSG__TYPE__START_ANS = 3,
  EVENTCAST__SENSOR_MSG__TYPE__TERMINATE = 4,
  EVENTCAST__SENSOR_MSG__TYPE__SENSOR_STATUS = 5,
  EVENTCAST__SENSOR_MSG__TYPE__SENSOR_DATA = 6
} Eventcast__SensorMsg__Type;
typedef enum _Eventcast__TouchMsg__Type {
  EVENTCAST__TOUCH_MSG__TYPE__START_REQ = 2,
  EVENTCAST__TOUCH_MSG__TYPE__START_ANS = 3,
  EVENTCAST__TOUCH_MSG__TYPE__TERMINATE = 4,
  EVENTCAST__TOUCH_MSG__TYPE__MAX_COUNT = 5,
  EVENTCAST__TOUCH_MSG__TYPE__TOUCH_DATA = 6,
  EVENTCAST__TOUCH_MSG__TYPE__RESOLUTION = 7,
  EVENTCAST__TOUCH_MSG__TYPE__DISPLAY_MSG = 8,
  EVENTCAST__TOUCH_MSG__TYPE__HWKEY_MSG = 9
} Eventcast__TouchMsg__Type;
typedef enum _Eventcast__EventCastMsg__Type {
  EVENTCAST__EVENT_CAST_MSG__TYPE__HANDSHAKE_REQ = 2,
  EVENTCAST__EVENT_CAST_MSG__TYPE__HANDSHAKE_ANS = 3,
  EVENTCAST__EVENT_CAST_MSG__TYPE__EMUL_STATE = 4,
  EVENTCAST__EVENT_CAST_MSG__TYPE__APP_STATE = 5,
  EVENTCAST__EVENT_CAST_MSG__TYPE__EVENT_MSG = 6,
  EVENTCAST__EVENT_CAST_MSG__TYPE__SENSOR_MSG = 7,
  EVENTCAST__EVENT_CAST_MSG__TYPE__TOUCH_MSG = 8
} Eventcast__EventCastMsg__Type;
typedef enum _Eventcast__MessageResult {
  EVENTCAST__MESSAGE_RESULT__SUCCESS = 1,
  EVENTCAST__MESSAGE_RESULT__FAILURE = 2,
  EVENTCAST__MESSAGE_RESULT__CANCEL = 3
} Eventcast__MessageResult;
typedef enum _Eventcast__ConnectionState {
  EVENTCAST__CONNECTION_STATE__CONNECTED = 1,
  EVENTCAST__CONNECTION_STATE__DISCONNECTED = 2,
  EVENTCAST__CONNECTION_STATE__TERMINATED = 3
} Eventcast__ConnectionState;
typedef enum _Eventcast__EventType {
  EVENTCAST__EVENT_TYPE__SENSOR = 1,
  EVENTCAST__EVENT_TYPE__TOUCH = 2
} Eventcast__EventType;
typedef enum _Eventcast__State {
  EVENTCAST__STATE__ENABLED = 1,
  EVENTCAST__STATE__DISABLED = 2
} Eventcast__State;
typedef enum _Eventcast__SensorType {
  EVENTCAST__SENSOR_TYPE__ACCEL = 1,
  EVENTCAST__SENSOR_TYPE__MAGNETIC = 2,
  EVENTCAST__SENSOR_TYPE__GYROSCOPE = 3,
  EVENTCAST__SENSOR_TYPE__PROXIMITY = 4,
  EVENTCAST__SENSOR_TYPE__LIGHT = 5
} Eventcast__SensorType;
typedef enum _Eventcast__TouchState {
  EVENTCAST__TOUCH_STATE__PRESSED = 1,
  EVENTCAST__TOUCH_STATE__RELEASED = 2
} Eventcast__TouchState;
typedef enum _Eventcast__HWKeyType {
  EVENTCAST__HWKEY_TYPE__MENU = 1,
  EVENTCAST__HWKEY_TYPE__HOME = 2,
  EVENTCAST__HWKEY_TYPE__BACK = 3,
  EVENTCAST__HWKEY_TYPE__POWER = 4,
  EVENTCAST__HWKEY_TYPE__VOLUME_UP = 5,
  EVENTCAST__HWKEY_TYPE__VOLUME_DOWN = 6
} Eventcast__HWKeyType;

/* --- messages --- */

struct  _Eventcast__HandShakeReq
{
  ProtobufCMessage base;
  int32_t key;
};
#define EVENTCAST__HAND_SHAKE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eventcast__hand_shake_req__descriptor) \
    , 0 }


struct  _Eventcast__HandShakeAns
{
  ProtobufCMessage base;
  Eventcast__MessageResult result;
};
#define EVENTCAST__HAND_SHAKE_ANS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eventcast__hand_shake_ans__descriptor) \
    , 0 }


struct  _Eventcast__EmulatorState
{
  ProtobufCMessage base;
  Eventcast__ConnectionState state;
};
#define EVENTCAST__EMULATOR_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eventcast__emulator_state__descriptor) \
    , 0 }


struct  _Eventcast__AppState
{
  ProtobufCMessage base;
  Eventcast__ConnectionState state;
};
#define EVENTCAST__APP_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eventcast__app_state__descriptor) \
    , 0 }


struct  _Eventcast__StartReq
{
  ProtobufCMessage base;
};
#define EVENTCAST__START_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eventcast__start_req__descriptor) \
     }


struct  _Eventcast__StartAns
{
  ProtobufCMessage base;
  Eventcast__MessageResult result;
};
#define EVENTCAST__START_ANS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eventcast__start_ans__descriptor) \
    , 0 }


struct  _Eventcast__SetEventStatus
{
  ProtobufCMessage base;
  Eventcast__EventType type;
  Eventcast__State state;
};
#define EVENTCAST__SET_EVENT_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eventcast__set_event_status__descriptor) \
    , 0, 0 }


struct  _Eventcast__EventMsg
{
  ProtobufCMessage base;
  Eventcast__EventMsg__TYPE type;
  Eventcast__StartReq *startreq;
  Eventcast__StartAns *startans;
  Eventcast__EventTerminate *terminate;
  Eventcast__SetEventStatus *setstatus;
};
#define EVENTCAST__EVENT_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eventcast__event_msg__descriptor) \
    , 0, NULL, NULL, NULL, NULL }


struct  _Eventcast__EventTerminate
{
  ProtobufCMessage base;
};
#define EVENTCAST__EVENT_TERMINATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eventcast__event_terminate__descriptor) \
     }


struct  _Eventcast__SetSensorStatus
{
  ProtobufCMessage base;
  Eventcast__SensorType type;
  Eventcast__State state;
};
#define EVENTCAST__SET_SENSOR_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eventcast__set_sensor_status__descriptor) \
    , 0, 0 }


struct  _Eventcast__SensorData
{
  ProtobufCMessage base;
  Eventcast__SensorType sensor;
  char *x;
  char *y;
  char *z;
};
extern char eventcast__sensor_data__x__default_value[];
extern char eventcast__sensor_data__y__default_value[];
extern char eventcast__sensor_data__z__default_value[];
#define EVENTCAST__SENSOR_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eventcast__sensor_data__descriptor) \
    , 0, eventcast__sensor_data__x__default_value, eventcast__sensor_data__y__default_value, eventcast__sensor_data__z__default_value }


struct  _Eventcast__SensorMsg
{
  ProtobufCMessage base;
  Eventcast__SensorMsg__Type type;
  Eventcast__StartReq *startreq;
  Eventcast__StartAns *startans;
  Eventcast__EventTerminate *terminate;
  Eventcast__SetSensorStatus *setstatus;
  Eventcast__SensorData *data;
};
#define EVENTCAST__SENSOR_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eventcast__sensor_msg__descriptor) \
    , 0, NULL, NULL, NULL, NULL, NULL }


struct  _Eventcast__Resolution
{
  ProtobufCMessage base;
  int32_t width;
  int32_t height;
};
#define EVENTCAST__RESOLUTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eventcast__resolution__descriptor) \
    , 0, 0 }


struct  _Eventcast__DisplayMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_framerate;
  int32_t framerate;
  protobuf_c_boolean has_imagedata;
  ProtobufCBinaryData imagedata;
};
#define EVENTCAST__DISPLAY_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eventcast__display_msg__descriptor) \
    , 0,0, 0,{0,NULL} }


struct  _Eventcast__TouchMaxCount
{
  ProtobufCMessage base;
  protobuf_c_boolean has_max;
  int32_t max;
};
#define EVENTCAST__TOUCH_MAX_COUNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eventcast__touch_max_count__descriptor) \
    , 0,10 }


struct  _Eventcast__TouchData
{
  ProtobufCMessage base;
  protobuf_c_boolean has_index;
  int32_t index;
  protobuf_c_boolean has_xpoint;
  float xpoint;
  protobuf_c_boolean has_ypoint;
  float ypoint;
  protobuf_c_boolean has_state;
  Eventcast__TouchState state;
};
#define EVENTCAST__TOUCH_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eventcast__touch_data__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


struct  _Eventcast__HWKeyMsg
{
  ProtobufCMessage base;
  Eventcast__HWKeyType type;
};
#define EVENTCAST__HWKEY_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eventcast__hwkey_msg__descriptor) \
    , 0 }


struct  _Eventcast__TouchMsg
{
  ProtobufCMessage base;
  Eventcast__TouchMsg__Type type;
  Eventcast__StartReq *startreq;
  Eventcast__StartAns *startans;
  Eventcast__EventTerminate *terminate;
  Eventcast__TouchMaxCount *maxcount;
  Eventcast__TouchData *touchdata;
  Eventcast__Resolution *resolution;
  Eventcast__DisplayMsg *display;
  Eventcast__HWKeyMsg *hwkey;
};
#define EVENTCAST__TOUCH_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eventcast__touch_msg__descriptor) \
    , 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _Eventcast__EventCastMsg
{
  ProtobufCMessage base;
  Eventcast__EventCastMsg__Type type;
  Eventcast__HandShakeReq *handshakereq;
  Eventcast__HandShakeAns *handshakeans;
  Eventcast__EmulatorState *emulstate;
  Eventcast__AppState *appstate;
  Eventcast__EventMsg *eventmsg;
  Eventcast__SensorMsg *sensormsg;
  Eventcast__TouchMsg *touchmsg;
};
#define EVENTCAST__EVENT_CAST_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&eventcast__event_cast_msg__descriptor) \
    , 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/* Eventcast__HandShakeReq methods */
void   eventcast__hand_shake_req__init
                     (Eventcast__HandShakeReq         *message);
size_t eventcast__hand_shake_req__get_packed_size
                     (const Eventcast__HandShakeReq   *message);
size_t eventcast__hand_shake_req__pack
                     (const Eventcast__HandShakeReq   *message,
                      uint8_t             *out);
size_t eventcast__hand_shake_req__pack_to_buffer
                     (const Eventcast__HandShakeReq   *message,
                      ProtobufCBuffer     *buffer);
Eventcast__HandShakeReq *
       eventcast__hand_shake_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eventcast__hand_shake_req__free_unpacked
                     (Eventcast__HandShakeReq *message,
                      ProtobufCAllocator *allocator);
/* Eventcast__HandShakeAns methods */
void   eventcast__hand_shake_ans__init
                     (Eventcast__HandShakeAns         *message);
size_t eventcast__hand_shake_ans__get_packed_size
                     (const Eventcast__HandShakeAns   *message);
size_t eventcast__hand_shake_ans__pack
                     (const Eventcast__HandShakeAns   *message,
                      uint8_t             *out);
size_t eventcast__hand_shake_ans__pack_to_buffer
                     (const Eventcast__HandShakeAns   *message,
                      ProtobufCBuffer     *buffer);
Eventcast__HandShakeAns *
       eventcast__hand_shake_ans__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eventcast__hand_shake_ans__free_unpacked
                     (Eventcast__HandShakeAns *message,
                      ProtobufCAllocator *allocator);
/* Eventcast__EmulatorState methods */
void   eventcast__emulator_state__init
                     (Eventcast__EmulatorState         *message);
size_t eventcast__emulator_state__get_packed_size
                     (const Eventcast__EmulatorState   *message);
size_t eventcast__emulator_state__pack
                     (const Eventcast__EmulatorState   *message,
                      uint8_t             *out);
size_t eventcast__emulator_state__pack_to_buffer
                     (const Eventcast__EmulatorState   *message,
                      ProtobufCBuffer     *buffer);
Eventcast__EmulatorState *
       eventcast__emulator_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eventcast__emulator_state__free_unpacked
                     (Eventcast__EmulatorState *message,
                      ProtobufCAllocator *allocator);
/* Eventcast__AppState methods */
void   eventcast__app_state__init
                     (Eventcast__AppState         *message);
size_t eventcast__app_state__get_packed_size
                     (const Eventcast__AppState   *message);
size_t eventcast__app_state__pack
                     (const Eventcast__AppState   *message,
                      uint8_t             *out);
size_t eventcast__app_state__pack_to_buffer
                     (const Eventcast__AppState   *message,
                      ProtobufCBuffer     *buffer);
Eventcast__AppState *
       eventcast__app_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eventcast__app_state__free_unpacked
                     (Eventcast__AppState *message,
                      ProtobufCAllocator *allocator);
/* Eventcast__StartReq methods */
void   eventcast__start_req__init
                     (Eventcast__StartReq         *message);
size_t eventcast__start_req__get_packed_size
                     (const Eventcast__StartReq   *message);
size_t eventcast__start_req__pack
                     (const Eventcast__StartReq   *message,
                      uint8_t             *out);
size_t eventcast__start_req__pack_to_buffer
                     (const Eventcast__StartReq   *message,
                      ProtobufCBuffer     *buffer);
Eventcast__StartReq *
       eventcast__start_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eventcast__start_req__free_unpacked
                     (Eventcast__StartReq *message,
                      ProtobufCAllocator *allocator);
/* Eventcast__StartAns methods */
void   eventcast__start_ans__init
                     (Eventcast__StartAns         *message);
size_t eventcast__start_ans__get_packed_size
                     (const Eventcast__StartAns   *message);
size_t eventcast__start_ans__pack
                     (const Eventcast__StartAns   *message,
                      uint8_t             *out);
size_t eventcast__start_ans__pack_to_buffer
                     (const Eventcast__StartAns   *message,
                      ProtobufCBuffer     *buffer);
Eventcast__StartAns *
       eventcast__start_ans__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eventcast__start_ans__free_unpacked
                     (Eventcast__StartAns *message,
                      ProtobufCAllocator *allocator);
/* Eventcast__SetEventStatus methods */
void   eventcast__set_event_status__init
                     (Eventcast__SetEventStatus         *message);
size_t eventcast__set_event_status__get_packed_size
                     (const Eventcast__SetEventStatus   *message);
size_t eventcast__set_event_status__pack
                     (const Eventcast__SetEventStatus   *message,
                      uint8_t             *out);
size_t eventcast__set_event_status__pack_to_buffer
                     (const Eventcast__SetEventStatus   *message,
                      ProtobufCBuffer     *buffer);
Eventcast__SetEventStatus *
       eventcast__set_event_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eventcast__set_event_status__free_unpacked
                     (Eventcast__SetEventStatus *message,
                      ProtobufCAllocator *allocator);
/* Eventcast__EventMsg methods */
void   eventcast__event_msg__init
                     (Eventcast__EventMsg         *message);
size_t eventcast__event_msg__get_packed_size
                     (const Eventcast__EventMsg   *message);
size_t eventcast__event_msg__pack
                     (const Eventcast__EventMsg   *message,
                      uint8_t             *out);
size_t eventcast__event_msg__pack_to_buffer
                     (const Eventcast__EventMsg   *message,
                      ProtobufCBuffer     *buffer);
Eventcast__EventMsg *
       eventcast__event_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eventcast__event_msg__free_unpacked
                     (Eventcast__EventMsg *message,
                      ProtobufCAllocator *allocator);
/* Eventcast__EventTerminate methods */
void   eventcast__event_terminate__init
                     (Eventcast__EventTerminate         *message);
size_t eventcast__event_terminate__get_packed_size
                     (const Eventcast__EventTerminate   *message);
size_t eventcast__event_terminate__pack
                     (const Eventcast__EventTerminate   *message,
                      uint8_t             *out);
size_t eventcast__event_terminate__pack_to_buffer
                     (const Eventcast__EventTerminate   *message,
                      ProtobufCBuffer     *buffer);
Eventcast__EventTerminate *
       eventcast__event_terminate__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eventcast__event_terminate__free_unpacked
                     (Eventcast__EventTerminate *message,
                      ProtobufCAllocator *allocator);
/* Eventcast__SetSensorStatus methods */
void   eventcast__set_sensor_status__init
                     (Eventcast__SetSensorStatus         *message);
size_t eventcast__set_sensor_status__get_packed_size
                     (const Eventcast__SetSensorStatus   *message);
size_t eventcast__set_sensor_status__pack
                     (const Eventcast__SetSensorStatus   *message,
                      uint8_t             *out);
size_t eventcast__set_sensor_status__pack_to_buffer
                     (const Eventcast__SetSensorStatus   *message,
                      ProtobufCBuffer     *buffer);
Eventcast__SetSensorStatus *
       eventcast__set_sensor_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eventcast__set_sensor_status__free_unpacked
                     (Eventcast__SetSensorStatus *message,
                      ProtobufCAllocator *allocator);
/* Eventcast__SensorData methods */
void   eventcast__sensor_data__init
                     (Eventcast__SensorData         *message);
size_t eventcast__sensor_data__get_packed_size
                     (const Eventcast__SensorData   *message);
size_t eventcast__sensor_data__pack
                     (const Eventcast__SensorData   *message,
                      uint8_t             *out);
size_t eventcast__sensor_data__pack_to_buffer
                     (const Eventcast__SensorData   *message,
                      ProtobufCBuffer     *buffer);
Eventcast__SensorData *
       eventcast__sensor_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eventcast__sensor_data__free_unpacked
                     (Eventcast__SensorData *message,
                      ProtobufCAllocator *allocator);
/* Eventcast__SensorMsg methods */
void   eventcast__sensor_msg__init
                     (Eventcast__SensorMsg         *message);
size_t eventcast__sensor_msg__get_packed_size
                     (const Eventcast__SensorMsg   *message);
size_t eventcast__sensor_msg__pack
                     (const Eventcast__SensorMsg   *message,
                      uint8_t             *out);
size_t eventcast__sensor_msg__pack_to_buffer
                     (const Eventcast__SensorMsg   *message,
                      ProtobufCBuffer     *buffer);
Eventcast__SensorMsg *
       eventcast__sensor_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eventcast__sensor_msg__free_unpacked
                     (Eventcast__SensorMsg *message,
                      ProtobufCAllocator *allocator);
/* Eventcast__Resolution methods */
void   eventcast__resolution__init
                     (Eventcast__Resolution         *message);
size_t eventcast__resolution__get_packed_size
                     (const Eventcast__Resolution   *message);
size_t eventcast__resolution__pack
                     (const Eventcast__Resolution   *message,
                      uint8_t             *out);
size_t eventcast__resolution__pack_to_buffer
                     (const Eventcast__Resolution   *message,
                      ProtobufCBuffer     *buffer);
Eventcast__Resolution *
       eventcast__resolution__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eventcast__resolution__free_unpacked
                     (Eventcast__Resolution *message,
                      ProtobufCAllocator *allocator);
/* Eventcast__DisplayMsg methods */
void   eventcast__display_msg__init
                     (Eventcast__DisplayMsg         *message);
size_t eventcast__display_msg__get_packed_size
                     (const Eventcast__DisplayMsg   *message);
size_t eventcast__display_msg__pack
                     (const Eventcast__DisplayMsg   *message,
                      uint8_t             *out);
size_t eventcast__display_msg__pack_to_buffer
                     (const Eventcast__DisplayMsg   *message,
                      ProtobufCBuffer     *buffer);
Eventcast__DisplayMsg *
       eventcast__display_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eventcast__display_msg__free_unpacked
                     (Eventcast__DisplayMsg *message,
                      ProtobufCAllocator *allocator);
/* Eventcast__TouchMaxCount methods */
void   eventcast__touch_max_count__init
                     (Eventcast__TouchMaxCount         *message);
size_t eventcast__touch_max_count__get_packed_size
                     (const Eventcast__TouchMaxCount   *message);
size_t eventcast__touch_max_count__pack
                     (const Eventcast__TouchMaxCount   *message,
                      uint8_t             *out);
size_t eventcast__touch_max_count__pack_to_buffer
                     (const Eventcast__TouchMaxCount   *message,
                      ProtobufCBuffer     *buffer);
Eventcast__TouchMaxCount *
       eventcast__touch_max_count__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eventcast__touch_max_count__free_unpacked
                     (Eventcast__TouchMaxCount *message,
                      ProtobufCAllocator *allocator);
/* Eventcast__TouchData methods */
void   eventcast__touch_data__init
                     (Eventcast__TouchData         *message);
size_t eventcast__touch_data__get_packed_size
                     (const Eventcast__TouchData   *message);
size_t eventcast__touch_data__pack
                     (const Eventcast__TouchData   *message,
                      uint8_t             *out);
size_t eventcast__touch_data__pack_to_buffer
                     (const Eventcast__TouchData   *message,
                      ProtobufCBuffer     *buffer);
Eventcast__TouchData *
       eventcast__touch_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eventcast__touch_data__free_unpacked
                     (Eventcast__TouchData *message,
                      ProtobufCAllocator *allocator);
/* Eventcast__HWKeyMsg methods */
void   eventcast__hwkey_msg__init
                     (Eventcast__HWKeyMsg         *message);
size_t eventcast__hwkey_msg__get_packed_size
                     (const Eventcast__HWKeyMsg   *message);
size_t eventcast__hwkey_msg__pack
                     (const Eventcast__HWKeyMsg   *message,
                      uint8_t             *out);
size_t eventcast__hwkey_msg__pack_to_buffer
                     (const Eventcast__HWKeyMsg   *message,
                      ProtobufCBuffer     *buffer);
Eventcast__HWKeyMsg *
       eventcast__hwkey_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eventcast__hwkey_msg__free_unpacked
                     (Eventcast__HWKeyMsg *message,
                      ProtobufCAllocator *allocator);
/* Eventcast__TouchMsg methods */
void   eventcast__touch_msg__init
                     (Eventcast__TouchMsg         *message);
size_t eventcast__touch_msg__get_packed_size
                     (const Eventcast__TouchMsg   *message);
size_t eventcast__touch_msg__pack
                     (const Eventcast__TouchMsg   *message,
                      uint8_t             *out);
size_t eventcast__touch_msg__pack_to_buffer
                     (const Eventcast__TouchMsg   *message,
                      ProtobufCBuffer     *buffer);
Eventcast__TouchMsg *
       eventcast__touch_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eventcast__touch_msg__free_unpacked
                     (Eventcast__TouchMsg *message,
                      ProtobufCAllocator *allocator);
/* Eventcast__EventCastMsg methods */
void   eventcast__event_cast_msg__init
                     (Eventcast__EventCastMsg         *message);
size_t eventcast__event_cast_msg__get_packed_size
                     (const Eventcast__EventCastMsg   *message);
size_t eventcast__event_cast_msg__pack
                     (const Eventcast__EventCastMsg   *message,
                      uint8_t             *out);
size_t eventcast__event_cast_msg__pack_to_buffer
                     (const Eventcast__EventCastMsg   *message,
                      ProtobufCBuffer     *buffer);
Eventcast__EventCastMsg *
       eventcast__event_cast_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   eventcast__event_cast_msg__free_unpacked
                     (Eventcast__EventCastMsg *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Eventcast__HandShakeReq_Closure)
                 (const Eventcast__HandShakeReq *message,
                  void *closure_data);
typedef void (*Eventcast__HandShakeAns_Closure)
                 (const Eventcast__HandShakeAns *message,
                  void *closure_data);
typedef void (*Eventcast__EmulatorState_Closure)
                 (const Eventcast__EmulatorState *message,
                  void *closure_data);
typedef void (*Eventcast__AppState_Closure)
                 (const Eventcast__AppState *message,
                  void *closure_data);
typedef void (*Eventcast__StartReq_Closure)
                 (const Eventcast__StartReq *message,
                  void *closure_data);
typedef void (*Eventcast__StartAns_Closure)
                 (const Eventcast__StartAns *message,
                  void *closure_data);
typedef void (*Eventcast__SetEventStatus_Closure)
                 (const Eventcast__SetEventStatus *message,
                  void *closure_data);
typedef void (*Eventcast__EventMsg_Closure)
                 (const Eventcast__EventMsg *message,
                  void *closure_data);
typedef void (*Eventcast__EventTerminate_Closure)
                 (const Eventcast__EventTerminate *message,
                  void *closure_data);
typedef void (*Eventcast__SetSensorStatus_Closure)
                 (const Eventcast__SetSensorStatus *message,
                  void *closure_data);
typedef void (*Eventcast__SensorData_Closure)
                 (const Eventcast__SensorData *message,
                  void *closure_data);
typedef void (*Eventcast__SensorMsg_Closure)
                 (const Eventcast__SensorMsg *message,
                  void *closure_data);
typedef void (*Eventcast__Resolution_Closure)
                 (const Eventcast__Resolution *message,
                  void *closure_data);
typedef void (*Eventcast__DisplayMsg_Closure)
                 (const Eventcast__DisplayMsg *message,
                  void *closure_data);
typedef void (*Eventcast__TouchMaxCount_Closure)
                 (const Eventcast__TouchMaxCount *message,
                  void *closure_data);
typedef void (*Eventcast__TouchData_Closure)
                 (const Eventcast__TouchData *message,
                  void *closure_data);
typedef void (*Eventcast__HWKeyMsg_Closure)
                 (const Eventcast__HWKeyMsg *message,
                  void *closure_data);
typedef void (*Eventcast__TouchMsg_Closure)
                 (const Eventcast__TouchMsg *message,
                  void *closure_data);
typedef void (*Eventcast__EventCastMsg_Closure)
                 (const Eventcast__EventCastMsg *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    eventcast__message_result__descriptor;
extern const ProtobufCEnumDescriptor    eventcast__connection_state__descriptor;
extern const ProtobufCEnumDescriptor    eventcast__event_type__descriptor;
extern const ProtobufCEnumDescriptor    eventcast__state__descriptor;
extern const ProtobufCEnumDescriptor    eventcast__sensor_type__descriptor;
extern const ProtobufCEnumDescriptor    eventcast__touch_state__descriptor;
extern const ProtobufCEnumDescriptor    eventcast__hwkey_type__descriptor;
extern const ProtobufCMessageDescriptor eventcast__hand_shake_req__descriptor;
extern const ProtobufCMessageDescriptor eventcast__hand_shake_ans__descriptor;
extern const ProtobufCMessageDescriptor eventcast__emulator_state__descriptor;
extern const ProtobufCMessageDescriptor eventcast__app_state__descriptor;
extern const ProtobufCMessageDescriptor eventcast__start_req__descriptor;
extern const ProtobufCMessageDescriptor eventcast__start_ans__descriptor;
extern const ProtobufCMessageDescriptor eventcast__set_event_status__descriptor;
extern const ProtobufCMessageDescriptor eventcast__event_msg__descriptor;
extern const ProtobufCEnumDescriptor    eventcast__event_msg__type__descriptor;
extern const ProtobufCMessageDescriptor eventcast__event_terminate__descriptor;
extern const ProtobufCMessageDescriptor eventcast__set_sensor_status__descriptor;
extern const ProtobufCMessageDescriptor eventcast__sensor_data__descriptor;
extern const ProtobufCMessageDescriptor eventcast__sensor_msg__descriptor;
extern const ProtobufCEnumDescriptor    eventcast__sensor_msg__type__descriptor;
extern const ProtobufCMessageDescriptor eventcast__resolution__descriptor;
extern const ProtobufCMessageDescriptor eventcast__display_msg__descriptor;
extern const ProtobufCMessageDescriptor eventcast__touch_max_count__descriptor;
extern const ProtobufCMessageDescriptor eventcast__touch_data__descriptor;
extern const ProtobufCMessageDescriptor eventcast__hwkey_msg__descriptor;
extern const ProtobufCMessageDescriptor eventcast__touch_msg__descriptor;
extern const ProtobufCEnumDescriptor    eventcast__touch_msg__type__descriptor;
extern const ProtobufCMessageDescriptor eventcast__event_cast_msg__descriptor;
extern const ProtobufCEnumDescriptor    eventcast__event_cast_msg__type__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_eventcast_2eproto__INCLUDED */
