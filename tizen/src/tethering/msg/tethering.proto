package tethering;

option java_package = "device.tethering.genmsg";

// protoc-c --c_out=../genmsg tethering.proto

// define value
enum MessageResult {
	SUCCESS = 1;
	FAILURE = 2;
	CANCEL = 3;
}

enum ConnectionState {
	CONNECTED = 1;
	DISCONNECTED = 2;
	TERMINATED = 3;
}

enum EventType {
	SENSOR = 1;
	TOUCH = 2;
}

enum State {
	ENABLED = 1;
	DISABLED = 2;
}

enum SensorType {
	ACCEL = 1;
	MAGNETIC = 2;
	GYROSCOPE = 3;
	PROXIMITY = 4;
	LIGHT = 5;
}

enum TouchState {
	PRESSED = 1;
	RELEASED = 2;
}

// define messages
message HandShakeReq {
	required int32 key = 1;
}

message HandShakeAns {
	required MessageResult result = 1;
}

message EmulatorState {
	required ConnectionState state = 1;
}

message AppState {
	required ConnectionState state = 1;
}

message StartReq {

}

message StartAns {
	required MessageResult result = 1;
}

message SetEventStatus {
	required EventType type = 1;
	required State state = 2;
}

message EventMsg {
	enum TYPE {
		START_REQ = 2;
		START_ANS = 3;
		TERMINATE = 4;
		EVENT_STATUS = 5;
	}

	required TYPE type = 1;
	optional StartReq startReq = 2;
	optional StartAns startAns = 3;
	optional EventTerminate terminate = 4;
	optional SetEventStatus setStatus = 5;
}

message EventTerminate {

}

message SetSensorStatus {
	required SensorType type = 1;
	required State state = 2;
}

message SensorData {
	required SensorType sensor = 1;
	optional string x = 2 [default = "0"];
	optional string y = 3 [default = "0"];
	optional string z = 4 [default = "0"];
}

message SensorMsg {
	enum Type {
		START_REQ = 2;
		START_ANS = 3;
		TERMINATE = 4;
		SENSOR_STATUS = 5;
		SENSOR_DATA = 6;
	}

	required Type type = 1;
	optional StartReq startReq= 2;
	optional StartAns startAns= 3;
	optional EventTerminate terminate = 4;
	optional SetSensorStatus setStatus = 5;
	optional SensorData data = 6;
}

message Resolution {
	required int32 width = 1;
	required int32 height = 2;
}

/*
message DisplayMsg {
	enum Type {
		START_REQ = 2;
		START_ANS = 3;
		TERMINATE = 4;
		FRAME_RATE = 5;
		IMAGE_DATA = 6;
	}

	required Type type = 1;
	optional StartReq startReq= 2;
	optional StartAns startAns= 3;
	optional EventTerminate terminate = 4;
	optional int32 frameRate = 5;
	optional bytes imageData = 6;
}
*/

message DisplayMsg {
	optional int32 frameRate = 1;
	optional bytes imageData = 2;
}

message TouchMaxCount {
	optional int32 max = 1 [default = 10];
}

message TouchData {
	optional int32 index = 1 [default = 0];
	optional float xPoint = 2 [default = 0.0];
	optional float yPoint = 3 [default = 0.0];
	optional TouchState state = 4;
}

message TouchMsg {
	enum Type {
		START_REQ = 2;
		START_ANS = 3;
		TERMINATE = 4;
		MAX_COUNT = 5;
		TOUCH_DATA = 6;
		RESOLUTION = 7;
		DISPLAY_MSG = 8;
	}
	required Type type = 1;
	optional StartReq startReq = 2;
	optional StartAns startAns = 3;
	optional EventTerminate terminate = 4;
	optional TouchMaxCount maxCount = 5;
	optional TouchData touchData = 6;
	optional Resolution resolution = 7;
	optional DisplayMsg display = 8;
}

message TetheringMsg {
	enum Type {
		HANDSHAKE_REQ = 2;
		HANDSHAKE_ANS = 3;
		EMUL_STATE = 4;
		APP_STATE = 5;
		EVENT_MSG = 6;
		SENSOR_MSG = 7;
		TOUCH_MSG = 8;
	}
	required Type type = 1;
	optional HandShakeReq handShakeReq = 2;
	optional HandShakeAns handShakeAns = 3;
	optional EmulatorState emulState = 4;
	optional AppState appState = 5;
	optional EventMsg eventMsg = 6;
	optional SensorMsg sensorMsg = 7;
	optional TouchMsg touchMsg = 8;
}
