#!/bin/sh -xe
# clean
clean()
{
	prepare

	cd $SRCDIR/tizen
	if test -e "Makefile"
	then
		./emulator_configure.sh x86 -e "$BUILD_CFLAGS $BUILD_LDFLAGS"
		make distclean
	fi
	rm -rf $SRCDIR/*.zip
	rm -rf $SRCDIR/*.tar.gz
}

#prepare
prepare()
{
	if [ "$JAVA_HOME" = "" ]
	then
		echo "Make sure that you have installed JDK"
        echo "and then set installed JDK/bin path into JAVA_HOME"
        echo "as a system environment variable on your PC!!"
		exit 1
	fi

	PYTHON_DIR=`env | grep PATH | grep Python`
	if [ "$PYTHON_DIR" = "" ]
	then
		echo "Make sure that you have installed Python 2.x version"
        echo "and then set installed Python/bin path into PATH system variable on your PC!"
		exit 1
	fi

	
	PURIFIED_ROOTDIR=`TEMP=\`echo "${ROOTDIR}" | cut -c-2 | sed "s/[:/]//g" | awk {'print tolower ($_)'}\`; echo \`echo "${ROOTDIR}" | sed "s/^../\/${TEMP}/"\``
	PATH=$PATH:$PURIFIED_ROOTDIR/bin:$PURIFIED_ROOTDIR/apache-ant_1.9.2/bin:$PURIFIED_ROOTDIR/SDL_1.2.15/bin:$PURIFIED_ROOTDIR/gtk-bundle_2.24.10/bin:$PURIFIED_ROOTDIR/libcurl-4_1.0.1/bin:$PURIFIED_ROOTDIR/pixman_0.30.0/bin
	export PATH

	export PKG_CONFIG_PATH=$ROOTDIR/lib/pkgconfig:$ROOTDIR/SDL_1.2.15/lib/pkgconfig:$ROOTDIR/gtk-bundle_2.24.10/lib/pkgconfig:$ROOTDIR/libcurl-4_1.0.1/lib/pkgconfig:$ROOTDIR/pixman_0.30.0/lib/pkgconfig
	BUILD_CFLAGS=--extra-cflags="-I$ROOTDIR/include "
	BUILD_CFLAGS+=--extra-cflags="-I$ROOTDIR/apache-ant_1.9.2/include "
	BUILD_CFLAGS+=--extra-cflags="-I$ROOTDIR/SDL_1.2.15/include "
	BUILD_CFLAGS+=--extra-cflags="-I$ROOTDIR/gtk-bundle_2.24.10/include "
	BUILD_CFLAGS+=--extra-cflags="-I$ROOTDIR/libcurl-4_1.0.1/include "
	BUILD_CFLAGS+=--extra-cflags="-I$ROOTDIR/pixman_0.30.0/include"
	BUILD_LDFLAGS=--extra-ldflags="-L$ROOTDIR/lib "
	BUILD_LDFLAGS=--extra-ldflags="-L$ROOTDIR/apache-ant_1.9.2/lib "
	BUILD_LDFLAGS=--extra-ldflags="-L$ROOTDIR/SDL_1.2.15/lib "
	BUILD_LDFLAGS=--extra-ldflags="-L$ROOTDIR/gtk-bundle_2.24.10/lib "
	BUILD_LDFLAGS=--extra-ldflags="-L$ROOTDIR/libcurl-4_1.0.1/lib "
	BUILD_LDFLAGS=--extra-ldflags="-L$ROOTDIR/pixman_0.30.0/lib"
}

# build
build()
{
	prepare

	cd $SRCDIR/tizen
	./emulator_configure.sh x86 -e "$BUILD_CFLAGS $BUILD_LDFLAGS"
	make all_dibs
	if [ $? -eq 0 ]
	then
		echo "x86 build success"
	else
		echo "x86 build failure"
		exit 1
	fi

#    make install_dibs		
#    make clean		
# 	
#    ./emulator_configure.sh arm -e "$BUILD_CFLAGS $BUILD_LDFLAGS"		
#    make all_dibs		
#    if [ $? -eq 0 ]		
#    then		
#		echo "arm build success"		
#    else		
#        echo "arm build failure"		
#        exit 1		
#    fi		
#    make install_dibs
}

# install
install()
{
	prepare

	X86_BIN_DIR=$SRCDIR/package/emulator-qemu-x86.package.${TARGET_OS}/data/tools
#	ARM_BIN_DIR=$SRCDIR/package/emulator-qemu-arm.package.${TARGET_OS}/data/tools
	COMMON_BIN_DIR=$SRCDIR/package/emulator-qemu-common.package.${TARGET_OS}/data/tools
	mkdir -p $X86_BIN_DIR
#	mkdir -p $ARM_BIN_DIR
	mkdir -p $COMMON_BIN_DIR

	cd $SRCDIR/tizen
	make install_dibs

	mv x86 $X86_BIN_DIR/emulator
#	mv x86 $ARM_BIN_DIR/emulator
	mv common $COMMON_BIN_DIR/emulator
}

[ "$1" = "clean" ] && clean
[ "$1" = "build" ] && build
[ "$1" = "install" ] && install

echo "success"
