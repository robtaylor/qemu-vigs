#!/bin/bash -xe
# clean
clean()
{
    prepare

    cd $SRCDIR/tizen
    if test -e "Makefile"
    then
        ./emulator_configure.sh x86 -e "$BUILD_CFLAGS $BUILD_LDFLAGS"
        make distclean
    fi
    rm -rf $SRCDIR/*.zip
    rm -rf $SRCDIR/*.tar.gz
}

# check build environment
prepare()
{
    if [ "$JAVA_HOME" = "" ]
    then
        echo "Make sure that you have installed JDK"
        echo "and then set installed JDK/bin path into JAVA_HOME"
        echo "as a system environment variable on your PC!!"
        exit 1
    fi

    export PKG_CONFIG_PATH=$ROOTDIR/glib2/lib/pkgconfig:$ROOTDIR/curl/lib/pkgconfig:$ROOTDIR/libffi/lib/pkgconfig:$ROOTDIR/libidn/lib/pkgconfig:$ROOTDIR/libxml2/lib/pkgconfig:$ROOTDIR/ncurses/lib/pkgconfig:$ROOTDIR/openssl/lib/pkgconfig:$ROOTDIR/pixman/lib/pkgconfig:$ROOTDIR/zlib/lib/pkgconfig:$ROOTDIR/libav/lib/pkgconfig:$PKG_CONFIG_PATH

    BUILD_CFLAGS="--extra-cflags=-I$ROOTDIR/libiconv/include "
    BUILD_LDFLAGS="--extra-ldflags=-L$ROOTDIR/libiconv/lib "
}

modify_files(){
    LIBIDN_PC=$ROOTDIR/libidn/lib/pkgconfig/libidn.pc
    GLIB_PC=$ROOTDIR/glib2/lib/pkgconfig/glib-2.0.pc
    PIXMAN_PC=$ROOTDIR/pixman/lib/pkgconfig/pixman-1.pc

    #modify .pc files
    ROOT_TMP=`echo $ROOTDIR | sed 's,/,\\\\\\/,g'`
    sed "s/prefix=\/opt\/local/prefix="$ROOT_TMP"\/libidn/g" $LIBIDN_PC > tmpfile
    cp -f tmpfile $LIBIDN_PC
    rm -f tmpfile

    sed "s/prefix=\/opt\/local/prefix="$ROOT_TMP"\/glib2/g" $GLIB_PC > tmpfile
    cp -f tmpfile $GLIB_PC
    rm -f tmpfile

    sed "s/prefix=\/opt\/local/prefix="$ROOT_TMP"\/pixman/g" $PIXMAN_PC > tmpfile
    cp -f tmpfile $PIXMAN_PC
    rm -f tmpfile

    #modify Makefile.target
    sed "/check-gl: check_gl.o/a \\
        export PKG_CONFIG_PATH=$PKG_CONFIG_PATH
    " $SRCDIR/Makefile.target > tmpfile

    sed 's/export PKG_CONFIG_PATH/	export PKG_CONFIG_PATH/g' tmpfile > $SRCDIR/Makefile.target
    rm -f tmpfile

    #just in case
#    sed "1 i\\
#    export PKG_CONFIG_PATH=$PKG_CONFIG_PATH
#
#    " $SRCDIR/Makefile.target > tmp
#    cp -f tmp $SRCDIR/Makefile.target
#    rm -f tmp
#    sed 's/export PKG_CONFIG_PATH/ export PKG_CONFIG_PATH/g' $SRCDIR/Makefile.target > tmp
#    cp -f tmp $SRCDIR/Makefile.target
#    rm -f tmp
}
# build
build()
{
    prepare

    #modify_files

    cd $SRCDIR/tizen/

    ./emulator_configure.sh x86 -e "$BUILD_CFLAGS $BUILD_LDFLAGS"
    make all_dibs
    if [ $? -eq 0 ]
    then
        echo "build success"
    else
        echo "build failure"
        exit 1
    fi

#   make install_dibs
#   make clean
#
#   ./emulator_configure.sh arm
#   make all_dibs
#   if [ $? -eq 0 ]
#   then
#       echo "arm build success"
#   else
#       echo "arm build failure"
#       exit 1
#   fi
#   make install_dibs
}

# install
install()
{
    X86_BIN_DIR=$SRCDIR/package/emulator-qemu-x86.package.${TARGET_OS}/data/tools
#   ARM_BIN_DIR=$SRCDIR/package/emulator-qemu-arm.package.${TARGET_OS}/data/tools
    COMMON_BIN_DIR=$SRCDIR/package/emulator-qemu-common.package.${TARGET_OS}/data/tools
    MOBILE_3_0_SKIN_RESOURCE_DIR=$SRCDIR/package/mobile-3.0-emulator-qemu-skins.package.${TARGET_OS}/data/platforms/mobile-3.0/emulator-resources/skins/
    mkdir -p $X86_BIN_DIR
#   mkdir -p $ARM_BIN_DIR
    mkdir -p $COMMON_BIN_DIR
    mkdir -p $MOBILE_3_0_SKIN_RESOURCE_DIR

    cd $SRCDIR/tizen
    make install_dibs

    mv x86 $X86_BIN_DIR/emulator
#   mv x86 $ARM_BIN_DIR/emulator
    mv common $COMMON_BIN_DIR/emulator

    #profile skins
    cp -pPR src/skin/client/skins/mobile-general-3btn $MOBILE_3_0_SKIN_RESOURCE_DIR/
    cp -pPR src/skin/client/skins/mobile-480x800-3btn $MOBILE_3_0_SKIN_RESOURCE_DIR/
    cp -pPR src/skin/client/skins/mobile-720x1280-3btn $MOBILE_3_0_SKIN_RESOURCE_DIR/
}

[ "$1" = "clean" ] && clean
[ "$1" = "build" ] && build
[ "$1" = "install" ] && install

echo "success"
